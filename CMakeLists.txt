################################################################################
# 1. 设置 CMake 版本要求（关键配置）
################################################################################
cmake_minimum_required(VERSION 3.20)

# 为什么选择 3.20？
# - CMake 3.20 引入了更强大的模块化支持和更好的语法特性（如目标属性）。
# - 确保所有开发者使用相同或更高版本的 CMake，避免兼容性问题。

################################################################################
# 2. 定义项目名称和版本（基础配置）
################################################################################
project(MyProject VERSION 1.0)

# 作用：
# - `MyProject` 是项目名称，用于生成的可执行文件和库的命名。
# - `VERSION 1.0` 定义项目版本，可用于构建日志或安装包。

################################################################################
# 3. 设置 C++ 标准（关键配置）
################################################################################
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 为什么选择 C++17？
# - 确保代码使用现代 C++ 特性（如 `std::optional`, `std::variant` 等）。
# - `CMAKE_CXX_STANDARD_REQUIRED ON` 强制编译器使用 C++17，避免降级。

################################################################################
# 4. 添加全局头文件路径（注意：建议使用现代方法替代）
################################################################################
include_directories(${CMAKE_SOURCE_DIR}/src)

# 🚨 注意：
# - 这是全局的头文件路径，所有子目录的源文件都可以直接使用此路径。
# - **现代做法**：推荐使用 `target_include_directories` 为每个目标单独设置路径，
#   而不是全局设置。但此处保留此配置以兼容现有代码结构。

################################################################################
# 5. 模块化构建：添加子目录（核心配置）
################################################################################

################################################################################
# 5.1 添加共享模块：src/shared/mutex
################################################################################
add_subdirectory(src/shared/mutex)

# 作用：
# - 在 `src/shared/mutex` 目录中执行 CMake 配置。
# - 此目录通常包含线程安全相关的代码（如 `MutexLock` 类）。

################################################################################
# 5.2 添加共享模块：src/shared/queue
################################################################################
add_subdirectory(src/shared/queue)

# 作用：
# - 在 `src/shared/queue` 目录中执行 CMake 配置。
# - 此目录通常包含队列相关的代码（如 `BaseQueue` 模板类）。

################################################################################
# 5.3 添加核心模块：src/tape
################################################################################
add_subdirectory(src/tape)

# 作用：
# - 在 `src/tape` 目录中执行 CMake 配置。
# - 此目录可能包含核心业务逻辑（如磁带处理模块）。

################################################################################
# 5.4 添加作业模块：src/job
################################################################################
add_subdirectory(src/job)

# 作用：
# - 在 `src/job` 目录中执行 CMake 配置。
# - 此目录可能包含作业管理相关代码（如 `JobManager` 类）。

################################################################################
# 5.5 添加测试模块：test
################################################################################
add_subdirectory(test)

# 作用：
# - 在 `test` 目录中执行 CMake 配置。
# - 通常用于单元测试、集成测试等验证代码的模块。
################################################################################

################################################################################
# 关键点解释（新手必读）
################################################################################

# 🔸 **模块化设计的好处**：
# 1. **可维护性**：每个子目录负责一个功能模块（如 `mutex` 负责线程同步）。
# 2. **可扩展性**：新增功能时，只需在对应子目录添加代码，无需修改顶层 CMake 文件。
# 3. **依赖管理**：每个子目录的 CMake 文件可独立管理依赖关系（如 `target_link_libraries`）。

# 🔸 **路径变量解释**：
# - `${CMAKE_SOURCE_DIR}`：项目的根目录（顶层 `CMakeLists.txt` 所在目录）。
# - `${CMAKE_CURRENT_SOURCE_DIR}`：当前 CMakeLists.txt 文件所在的目录（在子目录中使用）。

################################################################################
# 常见问题与解决方案
################################################################################

# 🔥 **问题1：头文件找不到**
# - 现象：`fatal error: MutexLock.hpp: No such file or directory`
# - 原因：子目录未正确设置头文件路径。
# - 解决：在子目录的 CMake 文件中使用 `target_include_directories`。

# 🔥 **问题2：编译器使用旧 C++ 标准**
# - 现象：代码中使用 C++17 特性时报错。
# - 解决：检查 `CMAKE_CXX_STANDARD` 是否设置为 17，且 `CMAKE_CXX_STANDARD_REQUIRED` 是否为 ON。

# 🔥 **问题3：模块间依赖混乱**
# - 现象：编译时出现 `undefined reference` 错误。
# - 解决：确保依赖库在子目录的 CMake 文件中通过 `target_link_libraries` 显式声明。

################################################################################
# 新手快速上手指南
################################################################################

# 1. 添加新模块：
#   - 在 `src/` 下创建新目录（如 `src/newmodule`）。
#   - 在该目录中创建 `CMakeLists.txt`，并添加 `add_subdirectory(src/newmodule)` 到顶层。

# 2. 修改 C++ 标准：
#   ```cmake
#   set(CMAKE_CXX_STANDARD 20)  # 切换到 C++20
#   set(CMAKE_CXX_STANDARD_REQUIRED ON)
#   ```

# 3. 检查构建输出：
#   ```bash
#   mkdir build && cd build
#   cmake ..  # 生成构建文件
#   make      # 编译项目
#   ```